RemoteHealth - Acerca de

Nombre de la aplicación: RemoteHealth
Versión: {{VERSION}}
Organización: Axolotlj Tech
Lenguaje y plataforma: Java 17 + JavaFX
Sistema de construcción: Maven

Descripción:
 RemoteHealth es una aplicación para la supervisión remota
 y el procesamiento de señales biomédicas provenientes de
 dispositivos médicos conectados. Ofrece una interfaz moderna,
 análisis en tiempo real y comunicación vía WebSocket.

Características principales:
- Comunicación serial y por WebSocket.
- Procesamiento digital de señales (DSP).
- Exportación y análisis de datos biomédicos (CSV/JSON).
- Visualización con JavaFX.
- Generación de códigos QR y captura de video.
- Análisis de anomalías en datos biomédicos.

Procesamiento biomédico:
- ECG → BPM/HRV: Detección de picos R tipo Pan-Tompkins (ventana 150 ms)
  y cálculo de BPM/HRV (SDNN, RMSSD) mediante PSD de Welch. Precisión IEC 
  60601-2-47.
- SpO₂ → Estimación AC/DC (ratio R) con fórmula SpO₂ = A − B·R, ventana
  de 6 s. Error ≤ ±2 % (ISO 80601-2-61:2019).
- PTT → Presión arterial: Modelo multivariante con PTT y RR-interval 
  (filtro 4–12 Hz). Cumple IEEE 1708-2014.
- Temperatura → MLX90614 con compensación de emisividad y media exponencial 
  (τ ≈ 15 s). Precisión ±0,3 °C (ISO 80601-2-56:2017).
- Artefactos: Rechazo adaptativo (LMS) por detección de movimiento 
  (RMS > 0,5 g) vía MMA8452Q. Conforme AAMI EC38:2022.
- Sincronización e integridad → Timestamps UNIX 64-bit vía NTP (RFC 5905) y 
  validación CRC-16. Estructura de datos compatible IEEE 11073-10407.

Tecnologías:
- DSP: jdsp, iirj, JTransforms, jwave
- Matemáticas: commons-math3, ssj
- Interfaz: JavaFX, FXML, Swing
- Comunicación: Tyrus, jSerialComm
- Formatos: gson, commons-csv, ZXing
- Logging: Propia

Integración con Arduino/ESP32:
 La parte embebida está implementada sobre ESP32 usando el entorno Arduino,
 y se encarga de la adquisición y transmisión de datos biomédicos en
 tiempo real. Utiliza tareas concurrentes y comunicación asíncrona para
 optimizar la recolección de datos y la estabilidad del sistema.

Sensores soportados:
- Adafruit MLX90614 (sensor de temperatura IR)
- MAX30105 (oxímetro y pulsómetro)
- SparkFun MMA8452Q (acelerómetro)
- AD8232 (sensor de ECG)

Comunicación:
- HTTP y WebSocket asíncronos (ESPAsyncWebServer + WebSocketsServer)
- Configuración Wi-Fi (modo AP/STA dual)
- Soporte de IPv6 y NTP para sincronización horaria
- JSON (ArduinoJson) para la estructura de mensajes

Procesamiento embebido:
- Filtrado y empaquetado de datos en formato HEX y JSON
- Gestión de concurrencia con FreeRTOS (tareas y semáforos)
- Protección de recursos compartidos con `portMUX` y mutexes I2C
- Persistencia de configuración con Preferences.h

Extras técnicos:
- Detección automática de sensores y fallos
- Protección contra corrupción de heap
- Gestión avanzada de interrupciones (para desconexión ECG)
- Modularidad y comandos vía puerto serie

Librerías Arduino utilizadas:
- Sistema: Preferences, WiFi, HTTPClient, esp_system, time
- Servidores: ESPAsyncWebServer, WebSocketsServer, AsyncTCP
- Sensores: Adafruit_MLX90614, MAX30105, SparkFun_MMA8452Q
- Utilidades: ArduinoJson, Wire

Licencia: MIT
Contacto: https://github.com/Wicho471/RemoteHealth