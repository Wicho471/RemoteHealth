name: Build & Release RemoteHealth

on:
  push:
    tags:
      - 'v*'

permissions:
  contents: write

env:
  JAVAFX_VERSION: 21.0.6

jobs:
# ─────────────────────────────────────────────
# 1️⃣ Crear el release (solo una vez)
# ─────────────────────────────────────────────
  create-release:
    runs-on: ubuntu-latest
    outputs:
      upload_url: ${{ steps.create_release.outputs.upload_url }}
    steps:
      - uses: actions/checkout@v3

      - name: Crear Release
        id: create_release
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GH_RELEASE_TOKEN }}
        with:
          tag_name:      ${{ github.ref_name }}
          release_name:  RemoteHealth ${{ github.ref_name }}
          body:          Release generado automáticamente para ${{ github.ref_name }}
          draft:         false
          prerelease:    false

# ─────────────────────────────────────────────
# 2️⃣ Windows (MSI)
# ─────────────────────────────────────────────
  build-windows:
    needs: create-release
    runs-on: windows-latest
    steps:
      - uses: actions/checkout@v3

      - name: Set up JDK 17
        uses: actions/setup-java@v3
        with:
          distribution: temurin
          java-version: 17

      - name: Build fat JAR
        run: mvn -B clean package

      - name: Descargar JavaFX JMODS
        run: |
          Invoke-WebRequest https://download2.gluonhq.com/openjfx/${{ env.JAVAFX_VERSION }}/openjfx-${{ env.JAVAFX_VERSION }}_windows-x64_bin-jmods.zip -OutFile javafx-jmods.zip
          Expand-Archive javafx-jmods.zip -DestinationPath javafx-jmods

      - name: Crear runtime image (jlink)
        run: |
          jlink --module-path "$env:JAVA_HOME/jmods;javafx-jmods/javafx-jmods-${{ env.JAVAFX_VERSION }}" `
                --add-modules ALL-MODULE-PATH `
                --output target/RemoteHealth-runtime

      - name: Crear MSI (jpackage)
        run: |
          New-Item -ItemType Directory -Force -Path target/installers | Out-Null
          Copy-Item -Path "src/main/resources/org/axolotlj/RemoteHealth/img/favicon.ico" -Destination "target/app-icon.ico"
          jpackage `
            --input target `
            --dest target/installers `
            --name "Remote Health" `
            --main-jar RemoteHealth-0.0.1-SNAPSHOT-jar-with-dependencies.jar `
            --main-class org.axolotlj.RemoteHealth.MainApp `
            --type msi `
            --runtime-image target/RemoteHealth-runtime `
            --win-shortcut `
            --win-menu `
            --win-menu-group "Remote Health" `
            --icon target/app-icon.ico

      - name: Listar archivos generados (debug)
        run: |
          echo "Contenido de target/installers:"
          Get-ChildItem -Path target/installers

      - name: Buscar MSI generado
        id: find_msi
        run: |
          $file = Get-ChildItem -Path target/installers -Filter 'RemoteHealth*.msi' | Select-Object -First 1
          if ($null -eq $file) {
            Write-Error "No se encontró ningún archivo MSI en target/installers"
            Exit 1
          }
          echo "MSI encontrado: $($file.FullName)"
          echo "msi_path=$($file.FullName)" >> $env:GITHUB_OUTPUT

      - name: Subir MSI
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GH_RELEASE_TOKEN }}
        with:
          upload_url:  ${{ needs.create-release.outputs.upload_url }}
          asset_path:  ${{ steps.find_msi.outputs.msi_path }}
          asset_name:  RemoteHealth-${{ github.ref_name }}.msi
          asset_content_type: application/octet-stream

      - name: Subir Fat JAR
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GH_RELEASE_TOKEN }}
        with:
          upload_url:  ${{ needs.create-release.outputs.upload_url }}
          asset_path:  ./target/RemoteHealth-0.0.1-SNAPSHOT-jar-with-dependencies.jar
          asset_name:  RemoteHealth-${{ github.ref_name }}-jar-with-dependencies.jar
          asset_content_type: application/java-archive

# ─────────────────────────────────────────────
# 3️⃣ macOS (DMG)
# ─────────────────────────────────────────────
  build-macos:
    needs: create-release
    runs-on: macos-latest
    steps:
      - uses: actions/checkout@v3

      - name: Set up JDK 17
        uses: actions/setup-java@v3
        with:
          distribution: temurin
          java-version: 17

      - name: Build fat JAR
        run: mvn -B clean package

      - name: Descargar JavaFX JMODS
        run: |
          curl -L -o javafx-jmods.zip https://download2.gluonhq.com/openjfx/${{ env.JAVAFX_VERSION }}/openjfx-${{ env.JAVAFX_VERSION }}_osx-x64_bin-jmods.zip
          unzip javafx-jmods.zip -d javafx-jmods

      - name: Crear runtime image (jlink)
        run: |
          jlink --module-path "$JAVA_HOME/jmods:javafx-jmods/javafx-jmods-${{ env.JAVAFX_VERSION }}" \
                --add-modules ALL-MODULE-PATH \
                --output target/RemoteHealth-runtime

      - name: Crear DMG (jpackage)
        run: |
          mkdir -p target/installers
          cp src/main/resources/org/axolotlj/RemoteHealth/img/favicon.icns target/app-icon.icns
          jpackage \
            --input target \
            --dest target/installers \
            --name "Remote Health" \
            --main-jar RemoteHealth-0.0.1-SNAPSHOT-jar-with-dependencies.jar \
            --main-class org.axolotlj.RemoteHealth.MainApp \
            --type dmg \
            --runtime-image target/RemoteHealth-runtime \
            --icon target/app-icon.icns

      - name: Listar archivos generados (debug)
        run: |
          echo "Contenido de target/installers:"
          ls -lh target/installers || echo "Carpeta no encontrada"

      - name: Buscar DMG generado
        id: find_dmg
        run: |
          dmg_file=$(find target/installers -name 'RemoteHealth*.dmg' | head -n 1)
          echo "DMG encontrado: $dmg_file"
          if [ -z "$dmg_file" ]; then
            echo "::error::No se encontró ningún archivo DMG en target/installers"
            exit 1
          fi
          echo "dmg_path=$dmg_file" >> "$GITHUB_OUTPUT"

      - name: Subir DMG
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GH_RELEASE_TOKEN }}
        with:
          upload_url:  ${{ needs.create-release.outputs.upload_url }}
          asset_path:  ${{ steps.find_dmg.outputs.dmg_path }}
          asset_name:  RemoteHealth-${{ github.ref_name }}.dmg
          asset_content_type: application/octet-stream

# ─────────────────────────────────────────────
# 4️⃣ Linux (DEB)
# ─────────────────────────────────────────────
  build-linux:
    needs: create-release
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3

      - name: Set up JDK 17
        uses: actions/setup-java@v3
        with:
          distribution: temurin
          java-version: 17

      - name: Build fat JAR
        run: mvn -B clean package

      - name: Instalar dependencias de jpackage
        run: sudo apt-get update -y && sudo apt-get install -y fakeroot dpkg rpm

      - name: Descargar JavaFX JMODS
        run: |
          wget https://download2.gluonhq.com/openjfx/${{ env.JAVAFX_VERSION }}/openjfx-${{ env.JAVAFX_VERSION }}_linux-x64_bin-jmods.zip -O javafx-jmods.zip
          unzip javafx-jmods.zip -d javafx-jmods

      - name: Crear runtime image (jlink)
        run: |
          jlink --module-path "$JAVA_HOME/jmods:javafx-jmods/javafx-jmods-${{ env.JAVAFX_VERSION }}" \
                --add-modules ALL-MODULE-PATH \
                --output target/RemoteHealth-runtime

      - name: Crear DEB (jpackage)
        run: |
          mkdir -p target/installers
          cp src/main/resources/org/axolotlj/RemoteHealth/img/favicon.png target/app-icon.png
          jpackage \
            --input target \
            --dest target/installers \
            --name "Remote Health" \
            --main-jar RemoteHealth-0.0.1-SNAPSHOT-jar-with-dependencies.jar \
            --main-class org.axolotlj.RemoteHealth.MainApp \
            --type deb \
            --runtime-image target/RemoteHealth-runtime \
            --icon target/app-icon.png \
            --linux-shortcut

      - name: Listar archivos generados (debug)
        run: |
          echo "Contenido de target/installers:"
          ls -lh target/installers || echo "Carpeta no encontrada"

      - name: Buscar DEB generado
        id: find_deb
        run: |
          deb_file=$(find target/installers -name 'remotehealth*.deb' | head -n 1)
          echo "DEB encontrado: $deb_file"
          if [ -z "$deb_file" ]; then
            echo "::error::No se encontró ningún archivo DEB en target/installers"
            exit 1
          fi
          echo "deb_path=$deb_file" >> "$GITHUB_OUTPUT"

      - name: Subir DEB
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GH_RELEASE_TOKEN }}
        with:
          upload_url:  ${{ needs.create-release.outputs.upload_url }}
          asset_path:  ${{ steps.find_deb.outputs.deb_path }}
          asset_name:  RemoteHealth-${{ github.ref_name }}.deb
          asset_content_type: application/octet-stream
