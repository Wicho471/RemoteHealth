name: Build & Release RemoteHealth

on:
  push:
    tags:
      - 'v*'  # se ejecuta solo al pushear un tag vX.Y.Z

permissions:
  contents: write

env:
  JAVAFX_VERSION: 21.0.6

jobs:
# ──────────────────────────────────────────────────────────────
# 1️⃣ Crear el release una sola vez
# ──────────────────────────────────────────────────────────────
  create-release:
    runs-on: ubuntu-latest
    outputs:
      upload_url: ${{ steps.create_release.outputs.upload_url }}
    steps:
      - uses: actions/checkout@v3

      - name: Crear Release
        id: create_release
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GH_RELEASE_TOKEN }}
        with:
          tag_name: ${{ github.ref_name }}
          release_name: RemoteHealth ${{ github.ref_name }}
          body: Release generado automáticamente para ${{ github.ref_name }}
          draft: false
          prerelease: false

# ──────────────────────────────────────────────────────────────
# 2️⃣ Windows
# ──────────────────────────────────────────────────────────────
  build-windows:
    needs: create-release
    runs-on: windows-latest
    outputs:
      msi_path: ${{ steps.find_artifact.outputs.msi_path }}
    steps:
      - uses: actions/checkout@v3

      - name: Set up JDK
        uses: actions/setup-java@v3
        with:
          distribution: temurin
          java-version: 17

      - name: Build Fat JAR
        run: mvn -B clean package

      - name: Descargar JavaFX JMODS
        run: |
          Invoke-WebRequest https://download2.gluonhq.com/openjfx/${{ env.JAVAFX_VERSION }}/openjfx-${{ env.JAVAFX_VERSION }}_windows-x64_bin-jmods.zip -OutFile javafx-jmods.zip
          Expand-Archive javafx-jmods.zip -DestinationPath javafx-jmods

      - name: Crear runtime image con jlink
        run: |
          jlink --module-path "$env:JAVA_HOME/jmods;javafx-jmods/javafx-jmods-${{ env.JAVAFX_VERSION }}" `
                --add-modules javafx.controls,javafx.fxml,javafx.swing `
                --output target/RemoteHealth-runtime

      - name: Crear MSI con jpackage
        run: |
          jpackage --input target `
                   --name RemoteHealth `
                   --main-jar RemoteHealth-0.0.1-SNAPSHOT-jar-with-dependencies.jar `
                   --main-class org.axolotlj.RemoteHealth.MainApp `
                   --type msi `
                   --runtime-image target/RemoteHealth-runtime `
                   --win-shortcut `
                   --win-menu `
                   --win-menu-group "RemoteHealth" `
                   --icon src/main/resources/org/axolotlj/RemoteHealth/img/favicons/app-icon.png

      - name: Buscar MSI generado
        id: find_artifact
        run: |
          $file = Get-ChildItem -Path ./target -Filter *.msi | Select-Object -First 1
          echo "MSI found: $($file.FullName)"
          echo "msi_path=$($file.FullName)" >> $env:GITHUB_OUTPUT

      - name: Subir MSI
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GH_RELEASE_TOKEN }}
        with:
          upload_url: ${{ needs.create-release.outputs.upload_url }}
          asset_path: ${{ steps.find_artifact.outputs.msi_path }}
          asset_name: RemoteHealth-${{ github.ref_name }}.msi
          asset_content_type: application/octet-stream

      - name: Subir Fat JAR
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GH_RELEASE_TOKEN }}
        with:
          upload_url: ${{ needs.create-release.outputs.upload_url }}
          asset_path: ./target/RemoteHealth-0.0.1-SNAPSHOT-jar-with-dependencies.jar
          asset_name: RemoteHealth-${{ github.ref_name }}-jar-with-dependencies.jar
          asset_content_type: application/java-archive

# ──────────────────────────────────────────────────────────────
# 3️⃣ macOS
# ──────────────────────────────────────────────────────────────
  build-macos:
    needs: create-release
    runs-on: macos-latest
    outputs:
      dmg_path: ${{ steps.find_artifact.outputs.dmg_path }}
    steps:
      - uses: actions/checkout@v3

      - name: Set up JDK
        uses: actions/setup-java@v3
        with:
          distribution: temurin
          java-version: 17

      - name: Build Fat JAR
        run: mvn -B clean package

      - name: Descargar JavaFX JMODS
        run: |
          curl -L -o javafx-jmods.zip https://download2.gluonhq.com/openjfx/${{ env.JAVAFX_VERSION }}/openjfx-${{ env.JAVAFX_VERSION }}_osx-x64_bin-jmods.zip
          unzip javafx-jmods.zip -d javafx-jmods

      - name: Crear runtime image con jlink
        run: |
          jlink --module-path "$JAVA_HOME/jmods:javafx-jmods/javafx-jmods-${{ env.JAVAFX_VERSION }}" \
                --add-modules javafx.controls,javafx.fxml,javafx.swing \
                --output target/RemoteHealth-runtime

      - name: Crear DMG con jpackage
        run: |
          jpackage \
            --input target \
            --name RemoteHealth \
            --main-jar RemoteHealth-0.0.1-SNAPSHOT-jar-with-dependencies.jar \
            --main-class org.axolotlj.RemoteHealth.MainApp \
            --type dmg \
            --runtime-image target/RemoteHealth-runtime

      - name: Buscar DMG generado
        id: find_artifact
        run: |
          dmg_file=$(find ./target -name '*.dmg' | head -n 1)
          echo "DMG found: $dmg_file"
          echo "dmg_path=$dmg_file" >> "$GITHUB_OUTPUT"

      - name: Subir DMG
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GH_RELEASE_TOKEN }}
        with:
          upload_url: ${{ needs.create-release.outputs.upload_url }}
          asset_path: ${{ steps.find_artifact.outputs.dmg_path }}
          asset_name: RemoteHealth-${{ github.ref_name }}.dmg
          asset_content_type: application/octet-stream

# ──────────────────────────────────────────────────────────────
# 4️⃣ Linux
# ──────────────────────────────────────────────────────────────
  build-linux:
    needs: create-release
    runs-on: ubuntu-latest
    outputs:
      deb_path: ${{ steps.find_artifact.outputs.deb_path }}
    steps:
      - uses: actions/checkout@v3

      - name: Set up JDK
        uses: actions/setup-java@v3
        with:
          distribution: temurin
          java-version: 17

      - name: Build Fat JAR
        run: mvn -B clean package

      - name: Instalar dependencias de jpackage
        run: sudo apt-get install -y fakeroot dpkg rpm

      - name: Descargar JavaFX JMODS
        run: |
          wget https://download2.gluonhq.com/openjfx/${{ env.JAVAFX_VERSION }}/openjfx-${{ env.JAVAFX_VERSION }}_linux-x64_bin-jmods.zip -O javafx-jmods.zip
          unzip javafx-jmods.zip -d javafx-jmods

      - name: Crear runtime image con jlink
        run: |
          jlink --module-path "$JAVA_HOME/jmods:javafx-jmods/javafx-jmods-${{ env.JAVAFX_VERSION }}" \
                --add-modules javafx.controls,javafx.fxml,javafx.swing \
                --output target/RemoteHealth-runtime

      - name: Crear DEB con jpackage
        run: |
          jpackage \
            --input target \
            --name RemoteHealth \
            --main-jar RemoteHealth-0.0.1-SNAPSHOT-jar-with-dependencies.jar \
            --main-class org.axolotlj.RemoteHealth.MainApp \
            --type deb \
            --runtime-image target/RemoteHealth-runtime

      - name: Buscar DEB generado
        id: find_artifact
        run: |
          deb_file=$(find ./target -name '*.deb' | head -n 1)
          echo "DEB found: $deb_file"
          echo "deb_path=$deb_file" >> "$GITHUB_OUTPUT"

      - name: Subir DEB
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GH_RELEASE_TOKEN }}
        with:
          upload_url: ${{ needs.create-release.outputs.upload_url }}
          asset_path: ${{ steps.find_artifact.outputs.deb_path }}
          asset_name: RemoteHealth-${{ github.ref_name }}.deb
          asset_content_type: application/octet-stream
